Metadata-Version: 2.2
Name: procli
Version: 0.0.1
Summary: A CLI for creating Python projects using Pipenv
Home-page: https://github.com/skrept338/procli
Author: skrept
Author-email: en.jargal.dev@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: click
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# procli

**procli** is a CLI tool for creating and managing Python projects inspired by the simplicity of npm. It streamlines project initialization, dependency management, and environment setup by leveraging Pipenv. With **procli**, you can quickly set up a new Python project, manage dependencies with ease, and ensure that your project runs in an isolated virtual environment.

## Features

- **Project Initialization:** Create a new project with a specified Python version, set up a Pipenv-managed virtual environment, and generate starter files.
- **Dependency Management:** Easily add, remove, and update dependencies using commands that wrap Pipenv's functionality.
- **One-Command Setup:** After cloning a project, run a single command to install all dependencies from the Pipfile and Pipfile.lock.
- **Familiar Workflow:** Inspired by npm, so if you're comfortable with JavaScript project setups, you'll find procli intuitive.

## Installation

Install **procli** using pip:

```bash
pip install procli
```

Alternatively, if you are developing **procli** locally, you can install it in editable mode:

```bash
git clone https://github.com/yourusername/procli.git
cd procli
pip install --editable .
```

## Usage

### Initializing a New Project

To initialize a new Python project with a specific Python version (e.g., Python 3.9), use the `init` command. This command creates the project directory, sets up a Pipenv-managed virtual environment, and generates a starter file (`main.py`).

```bash
procli init my_project --python python3.9
```

- **Example Output:**
  ```
  Created project directory: my_project
  Initializing Pipenv with python3.9...
  [Pipenv output...]
  Created starter file: main.py
  Project initialization complete!
  To activate the virtual environment, run 'pipenv shell' or execute your project with 'pipenv run python main.py'.
  ```

### Adding a Dependency

To add a new dependency to your project, use the `add` command. This will install the dependency using Pipenv and update your Pipfile accordingly.

```bash
procli add requests==2.28.0
```

- **Example Output:**
  ```
  Adding dependency: requests==2.28.0 ...
  [Pipenv output...]
  Dependency added.
  ```

### Removing a Dependency

If you need to remove a dependency from your project, use the `remove` command.

```bash
procli remove requests
```

- **Example Output:**
  ```
  Removing dependency: requests ...
  [Pipenv output...]
  Dependency removed.
  ```

### Installing Project Dependencies

After cloning a project that uses **procli**, you can set up the project environment and install all dependencies by running:

```bash
procli install
```

This command reads the Pipfile and Pipfile.lock files and installs all the required packages into the project's virtual environment.

- **Example Output:**
  ```
  Installing project dependencies...
  [Pipenv output...]
  Dependencies installed.
  ```

### Displaying Help

To see a list of available commands and options, run:

```bash
procli --help
```

This displays detailed usage instructions and available commands.

## Advanced Usage

- **Customizing Your Environment:**  
  You can customize your Pipenv environment further by editing the Pipfile generated by **procli**.
  
- **Script Execution:**  
  Although **procli** focuses on project setup and dependency management, you can run your Python scripts using Pipenv directly:
  
  ```bash
  pipenv run python your_script.py
  ```

- **Future Enhancements:**  
  Future versions of **procli** may include commands for updating dependencies (e.g., `procli update`) and additional configuration options.

## Contributing

Contributions are welcome! If you'd like to contribute or report issues, please open an issue or submit a pull request on [GitHub](https://github.com/yourusername/procli).

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## About

**procli** is developed to simplify Python project management by providing an npm-like experience for Python developers. It automates the tedious parts of setting up a virtual environment and managing dependencies so you can focus on writing code.
